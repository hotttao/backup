<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="1107px" preserveAspectRatio="none" style="width:1537px;height:1107px;background:#FFFFFF;" version="1.1" viewBox="0 0 1537 1107" width="1537px" zoomAndPan="magnify"><defs/><g><!--MD5=[2e31800f208179cab94650aeb782e4d8]
cluster event--><g id="cluster_event"><path d="M8.5,6.532 L48.5,6.532 A3.75,3.75 0 0 1 51,9.032 L58,32.8039 L1527.5,32.8039 A2.5,2.5 0 0 1 1530,35.3039 L1530,1098.032 A2.5,2.5 0 0 1 1527.5,1100.532 L8.5,1100.532 A2.5,2.5 0 0 1 6,1098.032 L6,9.032 A2.5,2.5 0 0 1 8.5,6.532 " fill="none" style="stroke:#000000;stroke-width:1.5;"/><line style="stroke:#000000;stroke-width:1.5;" x1="6" x2="58" y1="32.8039" y2="32.8039"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="39" x="10" y="24.7719">event</text></g><!--MD5=[85953dd995cc427e23b81df7f729f68e]
class event.EventBroadcaster--><g id="elem_event.EventBroadcaster"><rect codeLine="25" fill="#F1F1F1" height="169.6315" id="event.EventBroadcaster" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="550" x="906" y="540.532"/><ellipse cx="1118.75" cy="556.532" fill="#B4A7E5" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1115.1094,563.032 L1121.8906,563.032 L1121.8906,560.9539 L1119.7344,560.9539 L1119.7344,552.5164 L1121.8906,552.5164 L1121.8906,550.407 L1115.1094,550.407 L1115.1094,552.5164 L1117.2031,552.5164 L1117.2031,560.9539 L1115.1094,560.9539 L1115.1094,563.032 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="116" x="1139.25" y="562.636">EventBroadcaster</text><line style="stroke:#181818;stroke-width:0.5;" x1="907" x2="1455" y1="572.532" y2="572.532"/><line style="stroke:#181818;stroke-width:0.5;" x1="907" x2="1455" y1="580.532" y2="580.532"/><ellipse cx="917" cy="596.1679" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="217" x="926" y="600.7719">StartEventWatcher(eventHandler</text><text fill="#0000FF" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="30" x="1146" y="600.7719">func</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="184" x="1176" y="600.7719">(*v1.Event) ) event.Interface</text><ellipse cx="917" cy="616.4398" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="353" x="926" y="621.0438">StartRecordingToSink(sink EventSink) event.Interface</text><ellipse cx="917" cy="636.7118" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="114" x="926" y="641.3157">StartLogging(logf</text><text fill="#0000FF" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="30" x="1043" y="641.3157">func</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="62" x="1073" y="641.3157">(string, ...</text><text fill="#0000FF" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="59" x="1135" y="641.3157">interface</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="126" x="1194" y="641.3157">{}) ) event.Interface</text><ellipse cx="917" cy="656.9837" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="397" x="926" y="661.5876">StartStructuredLogging(verbosity klog.Level) event.Interface</text><ellipse cx="917" cy="677.2556" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="524" x="926" y="681.8596">NewRecorder(scheme *runtime.Scheme, source v1.EventSource) EventRecorder</text><ellipse cx="917" cy="697.5275" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="78" x="926" y="702.1315">Shutdown()</text></g><!--MD5=[6c6f91242ec2d336815515edd44e3681]
class event.EventRecorder--><g id="elem_event.EventRecorder"><rect codeLine="49" fill="#F1F1F1" height="88.5438" id="event.EventRecorder" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="681" x="840.5" y="209.532"/><ellipse cx="1128.75" cy="225.532" fill="#B4A7E5" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1125.1094,232.032 L1131.8906,232.032 L1131.8906,229.9539 L1129.7344,229.9539 L1129.7344,221.5164 L1131.8906,221.5164 L1131.8906,219.407 L1125.1094,219.407 L1125.1094,221.5164 L1127.2031,221.5164 L1127.2031,229.9539 L1125.1094,229.9539 L1125.1094,232.032 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="96" x="1149.25" y="231.636">EventRecorder</text><line style="stroke:#181818;stroke-width:0.5;" x1="841.5" x2="1520.5" y1="241.532" y2="241.532"/><line style="stroke:#181818;stroke-width:0.5;" x1="841.5" x2="1520.5" y1="249.532" y2="249.532"/><ellipse cx="851.5" cy="265.1679" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="505" x="860.5" y="269.7719">Event(object runtime.Object, eventtype string, reason string, message string)</text><ellipse cx="851.5" cy="285.4398" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="581" x="860.5" y="290.0438">Eventf(object runtime.Object, eventtype string, reason string, messageFmt string, args ...</text><text fill="#0000FF" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="59" x="1441.5" y="290.0438">interface</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="15" x="1500.5" y="290.0438">{})</text></g><!--MD5=[a1ec2d0ff0a840b9f5c6d550ee636109]
class event.EventSink--><g id="elem_event.EventSink"><rect codeLine="61" fill="#F1F1F1" height="108.8157" id="event.EventSink" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="391" x="985.5" y="882.032"/><ellipse cx="1143.75" cy="898.032" fill="#B4A7E5" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1140.1094,904.532 L1146.8906,904.532 L1146.8906,902.4539 L1144.7344,902.4539 L1144.7344,894.0164 L1146.8906,894.0164 L1146.8906,891.907 L1140.1094,891.907 L1140.1094,894.0164 L1142.2031,894.0164 L1142.2031,902.4539 L1140.1094,902.4539 L1140.1094,904.532 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="66" x="1164.25" y="904.136">EventSink</text><line style="stroke:#181818;stroke-width:0.5;" x1="986.5" x2="1375.5" y1="914.032" y2="914.032"/><line style="stroke:#181818;stroke-width:0.5;" x1="986.5" x2="1375.5" y1="922.032" y2="922.032"/><ellipse cx="996.5" cy="937.6679" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="270" x="1005.5" y="942.2719">Create(event *v1.Event) (*v1.Event, error)</text><ellipse cx="996.5" cy="957.9398" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="276" x="1005.5" y="962.5438">Update(event *v1.Event) (*v1.Event, error)</text><ellipse cx="996.5" cy="978.2118" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="365" x="1005.5" y="982.8157">Patch(oldEvent *v1.Event, data []byte) (*v1.Event, error)</text></g><!--MD5=[921c4cba4029e9454fc018340f66ace3]
class event.eventBroadcasterImpl--><g id="elem_event.eventBroadcasterImpl"><rect codeLine="93" fill="#F1F1F1" height="311.5349" id="event.eventBroadcasterImpl" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="551" x="207.5" y="780.532"/><ellipse cx="405.75" cy="796.532" fill="#7FFFD4" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M405.9375,803.2351 C408.2344,803.2351 409.6875,801.6101 409.6875,799.6101 C409.6875,797.782 408.8594,796.9382 407.7188,796.1414 L406.7031,795.4226 C405.5781,794.6101 405.1563,794.3132 405.1563,793.4539 C405.1563,792.7664 405.6406,792.3601 406.2188,792.3601 C406.9531,792.3601 407.4375,792.7507 408.1406,793.3914 L409.4531,791.8132 C408.4844,790.7976 407.4688,790.2039 406.2031,790.2039 C404.0625,790.2039 402.6094,791.7195 402.6094,793.6414 C402.6094,795.4382 403.5313,796.3445 404.625,797.0945 L405.7188,797.8445 C406.6563,798.4539 407.1094,799.032 407.1094,799.9695 C407.1094,800.6414 406.6406,801.0632 405.9375,801.0632 C405.2344,801.0632 404.4844,800.5476 403.8281,799.7195 L402.2813,801.407 C403.3125,802.5945 404.6094,803.2351 405.9375,803.2351 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="146" x="426.25" y="802.636">eventBroadcasterImpl</text><line style="stroke:#181818;stroke-width:0.5;" x1="208.5" x2="757.5" y1="812.532" y2="812.532"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="215.5" y="825.1679"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="189" x="227.5" y="832.7719">sleepDuration time.Duration</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="215.5" y="845.4398"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="170" x="227.5" y="853.0438">options CorrelatorOptions</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="215.5" y="865.7118"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="205" x="227.5" y="873.3157">cancelationCtx context.Context</text><line style="stroke:#181818;stroke-width:0.5;" x1="208.5" x2="757.5" y1="881.3477" y2="881.3477"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="215.5" y="893.9837"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="43" x="227.5" y="901.5876">cancel</text><text fill="#0000FF" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="30" x="273.5" y="901.5876">func</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="10" x="303.5" y="901.5876">()</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="3" x="227.5" y="921.8596"> </text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="215.5" y="934.5275"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="525" x="227.5" y="942.1315">recordToSink(sink EventSink, event *v1.Event, eventCorrelator *EventCorrelator)</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="3" x="227.5" y="962.4034"> </text><ellipse cx="218.5" cy="978.0713" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="353" x="227.5" y="982.6753">StartRecordingToSink(sink EventSink) event.Interface</text><ellipse cx="218.5" cy="998.3432" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="78" x="227.5" y="1002.9472">Shutdown()</text><ellipse cx="218.5" cy="1018.6151" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="114" x="227.5" y="1023.2191">StartLogging(logf</text><text fill="#0000FF" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="30" x="344.5" y="1023.2191">func</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="62" x="374.5" y="1023.2191">(string, ...</text><text fill="#0000FF" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="59" x="436.5" y="1023.2191">interface</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="126" x="495.5" y="1023.2191">{}) ) event.Interface</text><ellipse cx="218.5" cy="1038.8871" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="397" x="227.5" y="1043.491">StartStructuredLogging(verbosity klog.Level) event.Interface</text><ellipse cx="218.5" cy="1059.159" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="217" x="227.5" y="1063.7629">StartEventWatcher(eventHandler</text><text fill="#0000FF" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="30" x="447.5" y="1063.7629">func</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="184" x="477.5" y="1063.7629">(*v1.Event) ) event.Interface</text><ellipse cx="218.5" cy="1079.4309" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="524" x="227.5" y="1084.0349">NewRecorder(scheme *runtime.Scheme, source v1.EventSource) EventRecorder</text></g><!--MD5=[dc7ffea017de53798b338c5270ab6ac2]
class event.recorderImpl--><g id="elem_event.recorderImpl"><rect codeLine="133" fill="#F1F1F1" height="108.8157" id="event.recorderImpl" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="198" x="507" y="571.032"/><ellipse cx="559.25" cy="587.032" fill="#7FFFD4" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M559.4375,593.7351 C561.7344,593.7351 563.1875,592.1101 563.1875,590.1101 C563.1875,588.282 562.3594,587.4382 561.2188,586.6414 L560.2031,585.9226 C559.0781,585.1101 558.6563,584.8132 558.6563,583.9539 C558.6563,583.2664 559.1406,582.8601 559.7188,582.8601 C560.4531,582.8601 560.9375,583.2507 561.6406,583.8914 L562.9531,582.3132 C561.9844,581.2976 560.9688,580.7039 559.7031,580.7039 C557.5625,580.7039 556.1094,582.2195 556.1094,584.1414 C556.1094,585.9382 557.0313,586.8445 558.125,587.5945 L559.2188,588.3445 C560.1563,588.9539 560.6094,589.532 560.6094,590.4695 C560.6094,591.1414 560.1406,591.5632 559.4375,591.5632 C558.7344,591.5632 557.9844,591.0476 557.3281,590.2195 L555.7813,591.907 C556.8125,593.0945 558.1094,593.7351 559.4375,593.7351 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="85" x="579.75" y="593.136">recorderImpl</text><line style="stroke:#181818;stroke-width:0.5;" x1="508" x2="704" y1="603.032" y2="603.032"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="515" y="615.6679"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="172" x="527" y="623.2719">scheme *runtime.Scheme</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="515" y="635.9398"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="148" x="527" y="643.5438">source v1.EventSource</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="515" y="656.2118"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="161" x="527" y="663.8157">clock clock.PassiveClock</text><line style="stroke:#181818;stroke-width:0.5;" x1="508" x2="704" y1="671.8477" y2="671.8477"/></g><!--MD5=[e3b32ed71b086a3928e2b976b475148d]
class event.spamRecord--><g id="elem_event.spamRecord"><rect codeLine="146" fill="#F1F1F1" height="68.2719" id="event.spamRecord" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="307" x="498.5" y="220.032"/><ellipse cx="606.25" cy="236.032" fill="#7FFFD4" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M606.4375,242.7351 C608.7344,242.7351 610.1875,241.1101 610.1875,239.1101 C610.1875,237.282 609.3594,236.4382 608.2188,235.6414 L607.2031,234.9226 C606.0781,234.1101 605.6563,233.8132 605.6563,232.9539 C605.6563,232.2664 606.1406,231.8601 606.7188,231.8601 C607.4531,231.8601 607.9375,232.2507 608.6406,232.8914 L609.9531,231.3132 C608.9844,230.2976 607.9688,229.7039 606.7031,229.7039 C604.5625,229.7039 603.1094,231.2195 603.1094,233.1414 C603.1094,234.9382 604.0313,235.8445 605.125,236.5945 L606.2188,237.3445 C607.1563,237.9539 607.6094,238.532 607.6094,239.4695 C607.6094,240.1414 607.1406,240.5632 606.4375,240.5632 C605.7344,240.5632 604.9844,240.0476 604.3281,239.2195 L602.7813,240.907 C603.8125,242.0945 605.1094,242.7351 606.4375,242.7351 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83" x="626.75" y="242.136">spamRecord</text><line style="stroke:#181818;stroke-width:0.5;" x1="499.5" x2="804.5" y1="252.032" y2="252.032"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="506.5" y="264.6679"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="281" x="518.5" y="272.2719">rateLimiter flowcontrol.PassiveRateLimiter</text><line style="stroke:#181818;stroke-width:0.5;" x1="499.5" x2="804.5" y1="280.3039" y2="280.3039"/></g><!--MD5=[03b013c37bcc8950c1d44c5ca0239922]
class event.FakeRecorder--><g id="elem_event.FakeRecorder"><rect fill="#F1F1F1" height="48" id="event.FakeRecorder" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="123" x="747.5" y="601.532"/><ellipse cx="762.5" cy="617.532" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M762.7344,624.2351 C763.8906,624.2351 764.9844,623.7507 765.8125,622.7195 L764.3906,621.2039 C764,621.7507 763.5313,622.0632 762.9688,622.0632 C761.7813,622.0632 760.7656,620.9226 760.7656,617.6882 C760.7656,614.532 761.8281,613.3601 762.8594,613.3601 C763.4531,613.3601 763.8281,613.657 764.25,614.157 L765.6719,612.5945 C765,611.8445 764.0313,611.2039 762.75,611.2039 C760.3281,611.2039 758.1875,613.1726 758.1875,617.7976 C758.1875,622.4382 760.3281,624.2351 762.7344,624.2351 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="91" x="776.5" y="623.636">FakeRecorder</text><line style="stroke:#181818;stroke-width:0.5;" x1="748.5" x2="869.5" y1="633.532" y2="633.532"/><line style="stroke:#181818;stroke-width:0.5;" x1="748.5" x2="869.5" y1="641.532" y2="641.532"/></g><!--MD5=[f2326adc66e25689beca3c07591b97ad]
class event.Broadcaster--><g id="elem_event.Broadcaster"><rect codeLine="195" fill="#F1F1F1" height="433.1663" id="event.Broadcaster" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="449" x="14.5" y="37.532"/><ellipse cx="195.25" cy="53.532" fill="#7FFFD4" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M195.4375,60.2351 C197.7344,60.2351 199.1875,58.6101 199.1875,56.6101 C199.1875,54.782 198.3594,53.9382 197.2188,53.1414 L196.2031,52.4226 C195.0781,51.6101 194.6563,51.3132 194.6563,50.4539 C194.6563,49.7664 195.1406,49.3601 195.7188,49.3601 C196.4531,49.3601 196.9375,49.7507 197.6406,50.3914 L198.9531,48.8132 C197.9844,47.7976 196.9688,47.2039 195.7031,47.2039 C193.5625,47.2039 192.1094,48.7195 192.1094,50.6414 C192.1094,52.4382 193.0313,53.3445 194.125,54.0945 L195.2188,54.8445 C196.1563,55.4539 196.6094,56.032 196.6094,56.9695 C196.6094,57.6414 196.1406,58.0632 195.4375,58.0632 C194.7344,58.0632 193.9844,57.5476 193.3281,56.7195 L191.7813,58.407 C192.8125,59.5945 194.1094,60.2351 195.4375,60.2351 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="79" x="215.75" y="59.636">Broadcaster</text><line style="stroke:#181818;stroke-width:0.5;" x1="15.5" x2="462.5" y1="69.532" y2="69.532"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="22.5" y="82.1679"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="60" x="34.5" y="89.7719">watchers</text><text fill="#0000FF" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="30" x="97.5" y="89.7719">map</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="184" x="127.5" y="89.7719">[int64]*broadcasterWatcher</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="22.5" y="102.4398"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="120" x="34.5" y="110.0438">nextWatcher int64</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="22.5" y="122.7118"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="185" x="34.5" y="130.3157">distributing sync.WaitGroup</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="22.5" y="142.9837"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="175" x="34.5" y="150.5876">incomingBlock sync.Mutex</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="22.5" y="163.2556"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="62" x="34.5" y="170.8596">incoming</text><text fill="#0000FF" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="33" x="99.5" y="170.8596">chan</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="37" x="135.5" y="170.8596">Event</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="22.5" y="183.5275"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="55" x="34.5" y="191.1315">stopped</text><text fill="#0000FF" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="33" x="92.5" y="191.1315">chan</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="3" x="125.5" y="191.1315"> </text><text fill="#0000FF" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="38" x="128.5" y="191.1315">struct</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="10" x="166.5" y="191.1315">{}</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="22.5" y="203.7994"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="152" x="34.5" y="211.4034">watchQueueLength int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="22.5" y="224.0713"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="278" x="34.5" y="231.6753">fullChannelBehavior FullChannelBehavior</text><line style="stroke:#181818;stroke-width:0.5;" x1="15.5" x2="462.5" y1="239.7073" y2="239.7073"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="22.5" y="252.3432"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="90" x="34.5" y="259.9472">blockQueue(f</text><text fill="#0000FF" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="30" x="127.5" y="259.9472">func</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="18" x="157.5" y="259.9472">() )</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="22.5" y="272.6151"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="151" x="34.5" y="280.2191">stopWatching(id int64)</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="22.5" y="292.8871"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="61" x="34.5" y="300.491">closeAll()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="22.5" y="313.159"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="39" x="34.5" y="320.7629">loop()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="22.5" y="333.4309"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="152" x="34.5" y="341.0349">distribute(event Event)</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="3" x="34.5" y="361.3068"> </text><ellipse cx="25.5" cy="376.9747" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="161" x="34.5" y="381.5787">Watch() (Interface, error)</text><ellipse cx="25.5" cy="397.2466" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="375" x="34.5" y="401.8506">WatchWithPrefix(queuedEvents []Event) (Interface, error)</text><ellipse cx="25.5" cy="417.5185" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="330" x="34.5" y="422.1225">Action(action EventType, obj runtime.Object) error</text><ellipse cx="25.5" cy="437.7904" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="423" x="34.5" y="442.3944">ActionOrDrop(action EventType, obj runtime.Object) (bool, error)</text><ellipse cx="25.5" cy="458.0623" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="78" x="34.5" y="462.6663">Shutdown()</text></g><!--MD5=[c88849ae9b75bd72d7a2dc0e26555978]
class event.broadcasterWatcher--><g id="elem_event.broadcasterWatcher"><rect codeLine="218" fill="#F1F1F1" height="189.9034" id="event.broadcasterWatcher" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="189" x="275.5" y="530.532"/><ellipse cx="301.3" cy="546.532" fill="#7FFFD4" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M301.4875,553.2351 C303.7844,553.2351 305.2375,551.6101 305.2375,549.6101 C305.2375,547.782 304.4094,546.9382 303.2688,546.1414 L302.2531,545.4226 C301.1281,544.6101 300.7063,544.3132 300.7063,543.4539 C300.7063,542.7664 301.1906,542.3601 301.7688,542.3601 C302.5031,542.3601 302.9875,542.7507 303.6906,543.3914 L305.0031,541.8132 C304.0344,540.7976 303.0188,540.2039 301.7531,540.2039 C299.6125,540.2039 298.1594,541.7195 298.1594,543.6414 C298.1594,545.4382 299.0813,546.3445 300.175,547.0945 L301.2688,547.8445 C302.2063,548.4539 302.6594,549.032 302.6594,549.9695 C302.6594,550.6414 302.1906,551.0632 301.4875,551.0632 C300.7844,551.0632 300.0344,550.5476 299.3781,549.7195 L297.8313,551.407 C298.8625,552.5945 300.1594,553.2351 301.4875,553.2351 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="133" x="317.7" y="552.636">broadcasterWatcher</text><line style="stroke:#181818;stroke-width:0.5;" x1="276.5" x2="463.5" y1="562.532" y2="562.532"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="283.5" y="575.1679"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="38" x="295.5" y="582.7719">result</text><text fill="#0000FF" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="33" x="336.5" y="582.7719">chan</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="37" x="372.5" y="582.7719">Event</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="283.5" y="595.4398"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="55" x="295.5" y="603.0438">stopped</text><text fill="#0000FF" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="33" x="353.5" y="603.0438">chan</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="3" x="386.5" y="603.0438"> </text><text fill="#0000FF" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="38" x="389.5" y="603.0438">struct</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="10" x="427.5" y="603.0438">{}</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="283.5" y="615.7118"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="295.5" y="623.3157">stop sync.Once</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="283.5" y="635.9837"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="50" x="295.5" y="643.5876">id int64</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="283.5" y="656.2556"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="102" x="295.5" y="663.8596">m *Broadcaster</text><line style="stroke:#181818;stroke-width:0.5;" x1="276.5" x2="463.5" y1="671.8915" y2="671.8915"/><ellipse cx="286.5" cy="687.5275" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="87" x="295.5" y="692.1315">ResultChan()</text><text fill="#0000FF" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="33" x="385.5" y="692.1315">chan</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="37" x="421.5" y="692.1315">Event</text><ellipse cx="286.5" cy="707.7994" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="40" x="295.5" y="712.4034">Stop()</text></g><!--MD5=[f9dfd54eb0b1bf57f7d0f04872402dc6]
reverse link event.EventRecorder to event.FakeRecorder--><g id="link_event.EventRecorder_event.FakeRecorder"><path codeLine="165" d="M1115.4636,312.1803 C1054.919,366.7991 963.3721,451.6967 889,530.532 C867.1016,553.7446 843.7849,581.8693 828.0089,601.4682 " fill="none" id="event.EventRecorder-backto-event.FakeRecorder" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1110.9847,306.794,1130.5381,298.6291,1120.3442,317.2055,1110.9847,306.794" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[f5c7bd4d086de04872b408cce8a442f4]
reverse link event.EventRecorder to event.recorderImpl--><g id="link_event.EventRecorder_event.recorderImpl"><path codeLine="166" d="M1088.7748,309.0297 C976.9111,376.0078 795.2126,485.739 730,530.532 C711.6696,543.1227 692.3598,557.3945 674.5786,570.9786 " fill="none" id="event.EventRecorder-backto-event.recorderImpl" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1085.3434,302.9255,1106.1001,298.6637,1092.5315,314.9393,1085.3434,302.9255" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[4c9940e63d04accabe579fcc85036c95]
reverse link event.EventBroadcaster to event.eventBroadcasterImpl--><g id="link_event.EventBroadcaster_event.eventBroadcasterImpl"><path codeLine="167" d="M971.1783,719.0199 C904.3288,748.8053 829.3317,782.2209 758.5556,813.7558 " fill="none" id="event.EventBroadcaster-backto-event.eventBroadcasterImpl" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="968.6894,712.4655,989.807,710.7197,974.3872,725.2536,968.6894,712.4655" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[04bdce9f3b66979241a5e69b4af70584]
reverse link event.Broadcaster to event.eventBroadcasterImpl--><g id="link_event.Broadcaster_event.eventBroadcasterImpl"><path codeLine="168" d="M214.4889,483.9923 C214.8509,562.0175 225.23,647.7878 258,720.532 C267.5079,741.638 280.1147,761.7184 294.5204,780.5272 " fill="none" id="event.Broadcaster-backto-event.eventBroadcasterImpl" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="214.5243,470.5325,210.5085,476.5219,214.4927,482.5324,218.5085,476.543,214.5243,470.5325" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[f55b3fb794595e0b724c68ef5501da94]
reverse link event.Broadcaster to event.recorderImpl--><g id="link_event.Broadcaster_event.recorderImpl"><path codeLine="169" d="M462.4232,480.1947 C495.6158,513.7943 526.9769,545.5399 551.8718,570.7401 " fill="none" id="event.Broadcaster-backto-event.recorderImpl" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="453.0165,470.6727,454.3876,477.7522,461.4499,479.2095,460.0788,472.1299,453.0165,470.6727" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[4e155c3af36679ff503a41051506244b]
reverse link event.EventRecorder to event.EventBroadcaster--><g id="link_event.EventRecorder_event.EventBroadcaster"><path codeLine="170" d="M1181,304.2038 C1181,364.6973 1181,467.3228 1181,540.3115 " fill="none" id="event.EventRecorder-backto-event.EventBroadcaster" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="#181818" points="1181,298.8436,1177,307.8436,1181,303.8436,1185,307.8436,1181,298.8436" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[0898e8b9f3e573840b2672922a8d6ce1]
reverse link event.EventBroadcaster to event.EventSink--><g id="link_event.EventBroadcaster_event.EventSink"><path codeLine="171" d="M1181,716.075 C1181,769.7031 1181,835.8976 1181,881.6815 " fill="none" id="event.EventBroadcaster-backto-event.EventSink" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="#181818" points="1181,710.9255,1177,719.9255,1181,715.9255,1185,719.9255,1181,710.9255" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[9e0ffa0068be1bd649e1ea2638b756e7]
reverse link event.Broadcaster to event.broadcasterWatcher--><g id="link_event.Broadcaster_event.broadcasterWatcher"><path codeLine="172" d="M317.0997,475.5133 C323.7988,494.511 330.3151,512.9906 336.354,530.116 " fill="none" id="event.Broadcaster-backto-event.broadcasterWatcher" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="#181818" points="315.3928,470.6727,314.6136,480.4907,317.0556,475.3881,322.1582,477.8301,315.3928,470.6727" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[b97832e59bff2c9af6bf157bf1916fa5]
@startuml
namespace event {
    ' class CorrelatorOptions << (S,Aquamarine) >> {
    '     + LRUCacheSize int
    '     + BurstSize int
    '     + QPS float32
    '     + KeyFunc EventAggregatorKeyFunc
    '     + MessageFunc EventAggregatorMessageFunc
    '     + MaxEvents int
    '     + MaxIntervalInSeconds int
    '     + Clock clock.PassiveClock
    '     + SpamKeyFunc EventSpamKeyFunc

    ' }
    ' class EventAggregator << (S,Aquamarine) >> {
    '     - cache *lru.Cache
    '     - keyFunc EventAggregatorKeyFunc
    '     - messageFunc EventAggregatorMessageFunc
    '     - maxEvents uint
    '     - maxIntervalInSeconds uint
    '     - clock clock.PassiveClock

    '     + EventAggregate(newEvent *v1.Event) (*v1.Event, string)

    ' }
    interface EventBroadcaster  {
        + StartEventWatcher(eventHandler <font color=blue>func</font>(*v1.Event) ) event.Interface
        + StartRecordingToSink(sink EventSink) event.Interface
        + StartLogging(logf <font color=blue>func</font>(string, ...<font color=blue>interface</font>{}) ) event.Interface
        + StartStructuredLogging(verbosity klog.Level) event.Interface
        + NewRecorder(scheme *runtime.Scheme, source v1.EventSource) EventRecorder
        + Shutdown() 

    }
    ' class EventCorrelateResult << (S,Aquamarine) >> {
    '     + Event *v1.Event
    '     + Patch []byte
    '     + Skip bool

    ' }
    ' class EventCorrelator << (S,Aquamarine) >> {
    '     - filterFunc EventFilterFunc
    '     - aggregator *EventAggregator
    '     - logger *eventLogger

    '     + EventCorrelate(newEvent *v1.Event) (*EventCorrelateResult, error)
    '     + UpdateState(event *v1.Event) 

    ' }
    interface EventRecorder  {
        + Event(object runtime.Object, eventtype string, reason string, message string) 
        + Eventf(object runtime.Object, eventtype string, reason string, messageFmt string, args ...<font color=blue>interface</font>{}) 
        ' + AnnotatedEventf(object runtime.Object, annotations <font color=blue>map</font>[string]string, eventtype string, reason string, messageFmt string, args ...<font color=blue>interface</font>{}) 

    }
    ' class EventRecorderAdapter << (S,Aquamarine) >> {
    '     - recorder EventRecorder

    '     + Eventf(regarding runtime.Object, _ runtime.Object, eventtype string, reason string, action string, note string, args ...<font color=blue>interface</font>{}) 

    ' }
    interface EventSink  {
        + Create(event *v1.Event) (*v1.Event, error)
        + Update(event *v1.Event) (*v1.Event, error)
        + Patch(oldEvent *v1.Event, data []byte) (*v1.Event, error)

    }
    ' class EventSourceObjectSpamFilter << (S,Aquamarine) >> {
    '     - cache *lru.Cache
    '     - burst int
    '     - qps float32
    '     - clock clock.PassiveClock
    '     - spamKeyFunc EventSpamKeyFunc

    '     + Filter(event *v1.Event) bool

    ' }
    ' class FakeRecorder << (S,Aquamarine) >> {
    '     + Events <font color=blue>chan</font> string
    '     + IncludeObject bool

    '     - writeEvent(object runtime.Object, annotations <font color=blue>map</font>[string]string, eventtype string, reason string, messageFmt string, args ...<font color=blue>interface</font>{}) 

    '     + Event(object runtime.Object, eventtype string, reason string, message string) 
    '     + Eventf(object runtime.Object, eventtype string, reason string, messageFmt string, args ...<font color=blue>interface</font>{}) 
    '     + AnnotatedEventf(object runtime.Object, annotations <font color=blue>map</font>[string]string, eventtype string, reason string, messageFmt string, args ...<font color=blue>interface</font>{}) 

    ' }
    ' class aggregateRecord << (S,Aquamarine) >> {
    '     - localKeys sets.String
    '     - lastTimestamp v1.Time

    ' }
    class eventBroadcasterImpl << (S,Aquamarine) >> {
        - sleepDuration time.Duration
        - options CorrelatorOptions
        - cancelationCtx context.Context
        - cancel <font color=blue>func</font>() 

        - recordToSink(sink EventSink, event *v1.Event, eventCorrelator *EventCorrelator) 

        + StartRecordingToSink(sink EventSink) event.Interface
        + Shutdown() 
        + StartLogging(logf <font color=blue>func</font>(string, ...<font color=blue>interface</font>{}) ) event.Interface
        + StartStructuredLogging(verbosity klog.Level) event.Interface
        + StartEventWatcher(eventHandler <font color=blue>func</font>(*v1.Event) ) event.Interface
        + NewRecorder(scheme *runtime.Scheme, source v1.EventSource) EventRecorder

    }
    ' class eventLog << (S,Aquamarine) >> {
    '     - count uint
    '     - firstTimestamp v1.Time
    '     - name string
    '     - resourceVersion string

    ' }
    ' class eventLogger << (S,Aquamarine) >> {
    '     - cache *lru.Cache
    '     - clock clock.PassiveClock

    '     - eventObserve(newEvent *v1.Event, key string) (*v1.Event, []byte, error)
    '     - updateState(event *v1.Event) 
    '     - lastEventObservationFromCache(key string) eventLog

    ' }
    ' class event.EventAggregatorKeyFunc << (T, #FF7700) >>  {
    ' }
    ' class event.EventAggregatorMessageFunc << (T, #FF7700) >>  {
    ' }
    ' class event.EventFilterFunc << (T, #FF7700) >>  {
    ' }
    ' class event.EventSpamKeyFunc << (T, #FF7700) >>  {
    ' }
    class recorderImpl << (S,Aquamarine) >> {
        - scheme *runtime.Scheme
        - source v1.EventSource
        - clock clock.PassiveClock

        ' - generateEvent(object runtime.Object, annotations <font color=blue>map</font>[string]string, eventtype string, reason string, message string) 
        ' - makeEvent(ref *v1.ObjectReference, annotations <font color=blue>map</font>[string]string, eventtype string, reason string, message string) *v1.Event

        ' + Event(object runtime.Object, eventtype string, reason string, message string) 
        ' + Eventf(object runtime.Object, eventtype string, reason string, messageFmt string, args ...<font color=blue>interface</font>{}) 
        ' + AnnotatedEventf(object runtime.Object, annotations <font color=blue>map</font>[string]string, eventtype string, reason string, messageFmt string, args ...<font color=blue>interface</font>{}) 

    }
    class spamRecord << (S,Aquamarine) >> {
        - rateLimiter flowcontrol.PassiveRateLimiter

    }
    ' class "<font color=blue>func</font>(*v1.Event) bool" as fontcolorbluefuncfontv1Eventbool {
    '     'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    ' }
    ' class "<font color=blue>func</font>(*v1.Event) string" as fontcolorbluefuncfontv1Eventstring {
    '     'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    ' }
    ' class "<font color=blue>func</font>(*v1.Event) (string, string)" as fontcolorbluefuncfontv1Eventstringstring {
    '     'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    ' }
}
' "sync.RWMutex" *- - "event.EventAggregator"
' "sync.RWMutex" *- - "event.EventSourceObjectSpamFilter"
' "sync.RWMutex" *- - "event.eventLogger"


"event.EventRecorder" <|- - "event.FakeRecorder"
"event.EventRecorder" <|- - "event.recorderImpl"
"event.EventBroadcaster" <|- - "event.eventBroadcasterImpl"
"event.Broadcaster" *- - "event.eventBroadcasterImpl"
"event.Broadcaster" *- - "event.recorderImpl"
"event.EventRecorder" <.. "event.EventBroadcaster"
"event.EventBroadcaster" <.. "event.EventSink"
"event.Broadcaster" <.. "event.broadcasterWatcher"

' "event.EventCorrelator" <.. "event.eventLogger"
' "event.EventCorrelator" <.. "event.EventFilterFunc"
' "event.EventFilterFunc" <.. "event.EventSourceObjectSpamFilter"
' "event.EventCorrelator" <.. "event.EventAggregator"
' "event.EventCorrelator" <.. "event.EventCorrelateResult"
' "event.EventCorrelator" <.. "event.CorrelatorOptions"

' "event.EventSourceObjectSpamFilter" <.. "event.EventSpamKeyFunc"
' "event.EventSourceObjectSpamFilter" <.. "event.spamRecord"
' "event.EventSpamKeyFunc" <.. "event.getSpamKey"


' "event.EventAggregator" <.. "event.EventAggregatorKeyFunc"
' "event.EventAggregator" <.. "event.EventAggregatorMessageFunc"

' "event.EventAggregatorKeyFunc" <|- - "event.EventAggregatorByReasonFunc"
' "event.EventAggregatorMessageFunc" <|- - "event.EventAggregatorByReasonMessageFunc"

' "event.eventLogger" <.. "event.eventLog"

namespace event {
    class Broadcaster << (S,Aquamarine) >> {
        - watchers <font color=blue>map</font>[int64]*broadcasterWatcher
        - nextWatcher int64
        - distributing sync.WaitGroup
        - incomingBlock sync.Mutex
        - incoming <font color=blue>chan</font> Event
        - stopped <font color=blue>chan</font> <font color=blue>struct</font>{}
        - watchQueueLength int
        - fullChannelBehavior FullChannelBehavior

        - blockQueue(f <font color=blue>func</font>() ) 
        - stopWatching(id int64) 
        - closeAll() 
        - loop() 
        - distribute(event Event) 

        + Watch() (Interface, error)
        + WatchWithPrefix(queuedEvents []Event) (Interface, error)
        + Action(action EventType, obj runtime.Object) error
        + ActionOrDrop(action EventType, obj runtime.Object) (bool, error)
        + Shutdown() 

    }
    class broadcasterWatcher << (S,Aquamarine) >> {
        - result <font color=blue>chan</font> Event
        - stopped <font color=blue>chan</font> <font color=blue>struct</font>{}
        - stop sync.Once
        - id int64
        - m *Broadcaster

        + ResultChan() <font color=blue>chan</font> Event
        + Stop() 

    }
    ' class functionFakeRuntimeObject << (S,Aquamarine) >> {
    '     + GetObjectKind() schema.ObjectKind
    '     + DeepCopyObject() runtime.Object

    ' }
    ' class event.FullChannelBehavior << (T, #FF7700) >>  {
    ' }
    ' class event.functionFakeRuntimeObject << (T, #FF7700) >>  {
    ' }
}


' "__builtin__.int" #.. "event.FullChannelBehavior"
' "event.fontcolorbluefuncfontv1Eventstringstring" #.. "event.EventAggregatorKeyFunc"
' "event.fontcolorbluefuncfontv1Eventbool" #.. "event.EventFilterFunc"
' "event.fontcolorbluefuncfontv1Eventstring" #.. "event.EventAggregatorMessageFunc"
' "event.fontcolorbluefuncfontv1Eventstring" #.. "event.EventSpamKeyFunc"
' "event.<font color=blue>func</font>() " #.. "event.functionFakeRuntimeObject"
@enduml

@startuml
namespace event {



    interface EventBroadcaster  {
        + StartEventWatcher(eventHandler <font color=blue>func</font>(*v1.Event) ) event.Interface
        + StartRecordingToSink(sink EventSink) event.Interface
        + StartLogging(logf <font color=blue>func</font>(string, ...<font color=blue>interface</font>{}) ) event.Interface
        + StartStructuredLogging(verbosity klog.Level) event.Interface
        + NewRecorder(scheme *runtime.Scheme, source v1.EventSource) EventRecorder
        + Shutdown() 

    }



    interface EventRecorder  {
        + Event(object runtime.Object, eventtype string, reason string, message string) 
        + Eventf(object runtime.Object, eventtype string, reason string, messageFmt string, args ...<font color=blue>interface</font>{}) 

    }


    interface EventSink  {
        + Create(event *v1.Event) (*v1.Event, error)
        + Update(event *v1.Event) (*v1.Event, error)
        + Patch(oldEvent *v1.Event, data []byte) (*v1.Event, error)

    }






    class eventBroadcasterImpl << (S,Aquamarine) >> {
        - sleepDuration time.Duration
        - options CorrelatorOptions
        - cancelationCtx context.Context
        - cancel <font color=blue>func</font>() 

        - recordToSink(sink EventSink, event *v1.Event, eventCorrelator *EventCorrelator) 

        + StartRecordingToSink(sink EventSink) event.Interface
        + Shutdown() 
        + StartLogging(logf <font color=blue>func</font>(string, ...<font color=blue>interface</font>{}) ) event.Interface
        + StartStructuredLogging(verbosity klog.Level) event.Interface
        + StartEventWatcher(eventHandler <font color=blue>func</font>(*v1.Event) ) event.Interface
        + NewRecorder(scheme *runtime.Scheme, source v1.EventSource) EventRecorder

    }



    class recorderImpl << (S,Aquamarine) >> {
        - scheme *runtime.Scheme
        - source v1.EventSource
        - clock clock.PassiveClock



    }
    class spamRecord << (S,Aquamarine) >> {
        - rateLimiter flowcontrol.PassiveRateLimiter

    }
}


"event.EventRecorder" <|- - "event.FakeRecorder"
"event.EventRecorder" <|- - "event.recorderImpl"
"event.EventBroadcaster" <|- - "event.eventBroadcasterImpl"
"event.Broadcaster" *- - "event.eventBroadcasterImpl"
"event.Broadcaster" *- - "event.recorderImpl"
"event.EventRecorder" <.. "event.EventBroadcaster"
"event.EventBroadcaster" <.. "event.EventSink"
"event.Broadcaster" <.. "event.broadcasterWatcher"







namespace event {
    class Broadcaster << (S,Aquamarine) >> {
        - watchers <font color=blue>map</font>[int64]*broadcasterWatcher
        - nextWatcher int64
        - distributing sync.WaitGroup
        - incomingBlock sync.Mutex
        - incoming <font color=blue>chan</font> Event
        - stopped <font color=blue>chan</font> <font color=blue>struct</font>{}
        - watchQueueLength int
        - fullChannelBehavior FullChannelBehavior

        - blockQueue(f <font color=blue>func</font>() ) 
        - stopWatching(id int64) 
        - closeAll() 
        - loop() 
        - distribute(event Event) 

        + Watch() (Interface, error)
        + WatchWithPrefix(queuedEvents []Event) (Interface, error)
        + Action(action EventType, obj runtime.Object) error
        + ActionOrDrop(action EventType, obj runtime.Object) (bool, error)
        + Shutdown() 

    }
    class broadcasterWatcher << (S,Aquamarine) >> {
        - result <font color=blue>chan</font> Event
        - stopped <font color=blue>chan</font> <font color=blue>struct</font>{}
        - stop sync.Once
        - id int64
        - m *Broadcaster

        + ResultChan() <font color=blue>chan</font> Event
        + Stop() 

    }

}


@enduml

PlantUML version 1.2022.7(Tue Aug 23 01:01:30 CST 2022)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: zh
Country: CN
--></g></svg>